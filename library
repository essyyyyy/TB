local library = {
    windowcount = 0;
}

local dragger = {}
local resizer = {}

-- Dragger and Resizer Modules
local mouse = game:GetService("Players").LocalPlayer:GetMouse()
local inputService = game:GetService("UserInputService")
local heartbeat = game:GetService("RunService").Heartbeat

function dragger.new(frame)
    local success, event = pcall(function()
        return frame.MouseEnter
    end)

    if success then
        frame.Active = true

        event:Connect(function()
            local input = frame.InputBegan:Connect(function(key)
                if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
                    local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y)
                    while heartbeat:Wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                        frame:TweenPosition(
                            UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X),
                                0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y)),
                            "Out", "Quad", 0.1, true
                        )
                    end
                end
            end)

            local leave
            leave = frame.MouseLeave:Connect(function()
                input:Disconnect()
                leave:Disconnect()
            end)
        end)
    end
end

function resizer.new(parent, sibling)
    parent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
        sibling.Size = UDim2.new(sibling.Size.X.Scale, sibling.Size.X.Offset, sibling.Size.Y.Scale, parent.AbsoluteSize.Y)
    end)
end

-- Library Defaults
local defaults = {
    txtcolor = Color3.fromRGB(255, 255, 255),
    underline = Color3.fromRGB(0, 255, 140),
    barcolor = Color3.fromRGB(40, 40, 40),
    bgcolor = Color3.fromRGB(30, 30, 30),
}

-- Library Methods
function library:Create(class, props)
    local object = Instance.new(class)

    for prop, value in pairs(props) do
        if prop ~= "Parent" then
            object[prop] = value
        end
    end

    object.Parent = props.Parent
    return object
end

function library:CreateWindow(options)
    assert(options.text, "Window must have a name")

    local window = {
        count = 0,
        toggles = {},
        closed = false,
    }

    options = setmetatable(options or {}, { __index = defaults })

    self.windowcount += 1

    library.gui = library.gui or self:Create("ScreenGui", { Name = "UILibrary", Parent = game:GetService("CoreGui") })

    -- Create window frame
    window.frame = self:Create("Frame", {
        Name = options.text,
        Parent = library.gui,
        Active = true,
        Size = UDim2.new(0, 190, 0, 30),
        Position = UDim2.new(0, (15 + ((200 * self.windowcount) - 200)), 0, 15),
        BackgroundColor3 = options.barcolor,
        BorderSizePixel = 0,
    })

    window.background = self:Create("Frame", {
        Name = "Background",
        Parent = window.frame,
        BorderSizePixel = 0,
        BackgroundColor3 = options.bgcolor,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 25),
        ClipsDescendants = true,
    })

    window.container = self:Create("Frame", {
        Name = "Container",
        Parent = window.frame,
        BorderSizePixel = 0,
        BackgroundColor3 = options.bgcolor,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 25),
        ClipsDescendants = true,
    })

    window.organizer = self:Create("UIListLayout", {
        Name = "Sorter",
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = window.container,
    })

    window.padder = self:Create("UIPadding", {
        Name = "Padding",
        PaddingLeft = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 5),
        Parent = window.container,
    })

    self:Create("Frame", {
        Name = "Underline",
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 1, -1),
        BorderSizePixel = 0,
        BackgroundColor3 = options.underline,
        Parent = window.frame,
    })

    -- Toggle Button
    local toggleButton = self:Create("TextButton", {
        Name = "Toggle",
        ZIndex = 2,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Text = "-",
        TextSize = 17,
        TextColor3 = options.txtcolor,
        Font = Enum.Font.FredokaOne,
        Parent = window.frame,
    })

    toggleButton.MouseButton1Click:Connect(function()
        window.closed = not window.closed
        toggleButton.Text = window.closed and "+" or "-"

        if window.closed then
            window:Resize(true, UDim2.new(1, 0, 0, 0))
        else
            window:Resize(true)
        end
    end)

    -- Title Label
    self:Create("TextLabel", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = options.txtcolor,
        TextSize = 17,
        Font = Enum.Font.FredokaOne,
        Text = options.text or "Window",
        Name = "Window",
        Parent = window.frame,
    })

    -- Drag and Resize
    dragger.new(window.frame)
    resizer.new(window.background, window.container)

    -- Helper Functions
    local function getSize()
        local ySize = 0
        for _, object in pairs(window.container:GetChildren()) do
            if not object:IsA("UIListLayout") and not object:IsA("UIPadding") then
                ySize += object.AbsoluteSize.Y
            end
        end
        return UDim2.new(1, 0, 0, ySize + 10)
    end

    function window:Resize(tween, change)
        local size = change or getSize()
        self.container.ClipsDescendants = true

        if tween then
            self.background:TweenSize(size, "Out", "Sine", 0.5, true)
        else
            self.background.Size = size
        end
    end

    -- Other Methods: AddToggle, AddBox, AddButton, AddLabel, AddDropdown (Unchanged)
    -- ...

    return window
end

return library

