local library = {
    windowcount = 0;
}

local dragger = {}
local resizer = {}

-- Utility services
local players = game:GetService("Players")
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local debris = game:GetService("Debris")
local textService = game:GetService("TextService")

local mouse = players.LocalPlayer:GetMouse()

-- Dragger module for window movement
do
    function dragger.new(frame)
        local success, event = pcall(function()
            return frame.MouseEnter
        end)

        if success then
            frame.Active = true
            event:Connect(function()
                local input = frame.InputBegan:Connect(function(key)
                    if key.UserInputType == Enum.UserInputType.MouseButton1 then
                        local offset = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y)
                        while runService.Heartbeat:Wait() and userInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                            frame:TweenPosition(
                                UDim2.new(0, mouse.X - offset.X + frame.Size.X.Offset * frame.AnchorPoint.X, 0, mouse.Y - offset.Y + frame.Size.Y.Offset * frame.AnchorPoint.Y),
                                Enum.EasingDirection.Out,
                                Enum.EasingStyle.Quad,
                                0.1,
                                true
                            )
                        end
                    end
                end)

                local leave
                leave = frame.MouseLeave:Connect(function()
                    input:Disconnect()
                    leave:Disconnect()
                end)
            end)
        end
    end
end

-- Resizer module for adjusting container size
do
    function resizer.new(parent, target)
        parent:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
            target.Size = UDim2.new(target.Size.X.Scale, target.Size.X.Offset, target.Size.Y.Scale, parent.AbsoluteSize.Y)
        end)
    end
end

-- Default colors for the UI
local defaults = {
    txtcolor = Color3.fromRGB(255, 255, 255),
    underline = Color3.fromRGB(0, 255, 140),
    barcolor = Color3.fromRGB(40, 40, 40),
    bgcolor = Color3.fromRGB(30, 30, 30),
}

-- Utility function to create UI elements
function library:Create(class, props)
    local object = Instance.new(class)
    for key, value in pairs(props) do
        if key ~= "Parent" then
            object[key] = value
        end
    end
    object.Parent = props.Parent
    return object
end

-- Window creation
function library:CreateWindow(options)
    assert(options.text, "Window name missing")

    options = setmetatable(options or {}, { __index = defaults })

    local window = {
        count = 0,
        toggles = {},
        closed = false,
    }

    self.windowcount += 1

    library.gui = library.gui or self:Create("ScreenGui", {
        Name = "UILibrary",
        Parent = game:GetService("CoreGui"),
    })

    local frame = self:Create("Frame", {
        Name = options.text,
        Parent = library.gui,
        Active = true,
        Size = UDim2.new(0, 190, 0, 30),
        Position = UDim2.new(0, (15 + (200 * (self.windowcount - 1))), 0, 15),
        BackgroundColor3 = options.barcolor,
        BorderSizePixel = 0,
    })

    local container = self:Create("Frame", {
        Name = "Container",
        Parent = frame,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 25),
        BackgroundColor3 = options.bgcolor,
        ClipsDescendants = true,
        BorderSizePixel = 0,
    })

    self:Create("UIListLayout", {
        Parent = container,
        SortOrder = Enum.SortOrder.LayoutOrder,
    })

    self:Create("UIPadding", {
        Parent = container,
        PaddingLeft = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 5),
    })

    -- Underline and toggle button
    self:Create("Frame", {
        Name = "Underline",
        Parent = frame,
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 1, -1),
        BackgroundColor3 = options.underline,
        BorderSizePixel = 0,
    })

    local toggleButton = self:Create("TextButton", {
        Name = "Toggle",
        Parent = frame,
        Position = UDim2.new(1, -25, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Text = "-",
        TextColor3 = options.txtcolor,
        BackgroundTransparency = 1,
    })

    toggleButton.MouseButton1Click:Connect(function()
        window.closed = not window.closed
        toggleButton.Text = window.closed and "+" or "-"
        container:TweenSize(window.closed and UDim2.new(1, 0, 0, 0) or UDim2.new(1, 0, 0, container.AbsoluteSize.Y), Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.5, true)
    end)

    -- Resize and drag support
    dragger.new(frame)
    resizer.new(frame, container)

    function window:AddToggle(text, callback)
        local toggle = self:Create("TextLabel", {
            Text = text,
            Size = UDim2.new(1, -10, 0, 20),
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = container,
        })

        local button = self:Create("TextButton", {
            Text = "OFF",
            Size = UDim2.new(0, 50, 1, 0),
            Position = UDim2.new(1, -50, 0, 0),
            TextColor3 = Color3.fromRGB(255, 25, 25),
            BackgroundTransparency = 1,
            Parent = toggle,
        })

        button.MouseButton1Click:Connect(function()
            local state = not window.toggles[text]
            window.toggles[text] = state
            button.Text = state and "ON" or "OFF"
            button.TextColor3 = state and Color3.fromRGB(0, 255, 140) or Color3.fromRGB(255, 25, 25)
            callback(state)
        end)
    end

    return window
end

return library
